@page "/Courses"
@attribute [Authorize]

@using Microsoft.AspNetCore.Identity;
@using PearReview.Areas.Courses.Data;
@using PearReview.Areas.Courses.Services;
@using PearReview.Areas.Identity.Data;
@using PearReview.Areas.Identity.Services;
@using System.Security.Claims;

@inject CoursesService CoursesSvc
@inject UsersService UsersSvc
@inject CurrentUserService CurrentUserSvc
@inject NavigationManager Navigation

<h3>Courses</h3>

<RoleShow RequiredRole="@UserRole.Teacher">
    <button class="btn btn-primary" @onclick="GoToCreateCourse">New Course</button>
</RoleShow>

@if (allCourses == null)
{
        <p><em>Loading...</em></p>
}
else
{
        <table class="table">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Name</th>
                    <th>Start Date</th>
                    <th>Teacher</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
            @foreach (var course in allCourses)
            {
                <tr>
                    <td>🔵 @course.Id</td>
                    <td>@course.Name</td>
                    <td>@course.StartDate.ToLocalTime().ToString("dd MMMM yyyy")</td>
                    <td>
                        @if (course.Teacher.FirstName != null && course.Teacher.LastName != null)
                        {
                            @(@course.Teacher.FirstName + " " + @course.Teacher.LastName)
                        }
                        else
                        {
                            <span>-</span>
                        }
                    </td>
                    <td>@course.Description</td>
                </tr>
            }
            </tbody>
        </table>
}

@code {
    private AppUser? currentUser;

    private IList<Course> allCourses { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        if (currentUser == null)
        {
            currentUser = (await CurrentUserSvc.GetCurrentUser())!;
        }

        await FetchCourses();

        await base.OnInitializedAsync();
    }

    public async Task AddCourse()
    {
        AppUser teacher = currentUser!;
        if (teacher == null)
        {
            List<AppUser> users = await UsersSvc.GetUsersAsync();
            teacher = users[1];
        }

        Course course = new()
            {
                Name = "Blazor Server Course",
                Description = "This course takes a deep dive into web app development with Blazor Server and ASP.NET Core",
                StartDate = DateTime.Now.AddDays(5),
                Teacher = teacher,
                CreatedOn = DateTime.Now
            };

        await CoursesSvc.AddCourse(course);

        await FetchCourses();
    }

    private async Task FetchCourses()
    {
        allCourses = await CoursesSvc.GetCoursesWithUsersAsync();
    }

    private void GoToCreateCourse()
    {
        Navigation.NavigateTo("Courses/Create");
    }
}
